{"version":3,"sources":["components/stopwatch.css","components/digitalClock.css","components/header.js","components/digitalClock.js","components/stopwatch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","stopwatchTime","stopWatchMilliSeconds","stopwatchButtons","stopwatchLaps","stopwatchLapsNum","stopwatchLapsMilli","dClockMain","dClockTime","dClockWorld","dClockDate","Header","react_default","a","createElement","NavLink","exact","to","React","Component","DigitalClock","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","date","month","state","time","Date","setInterval","setState","num","getDay","getMonth","className","style","dClockContainer","addZero","getHours","getMinutes","getSeconds","getDate","getFullYear","Stopwatch","elapssed","elapssedMemory","laps","_this2","startTime","getTime","timer","clearInterval","tmp","push","_this3","arguments","length","undefined","parseInt","_this4","elapssedToString","stopwatchTimeBig","reverse","map","idx","class","key","onClick","start","pause","lap","restart","clear","App","document","title","HashRouter","basename","process","components_header","es","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17aff9cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"stopwatchTime\":\"_1IwOtJRP9MSHszIIU2sfMA\",\"stopWatchMilliSeconds\":\"oDH7vVRERw2caEZewJgeR\",\"stopwatchButtons\":\"KMJ9aawbF_nmZBQ_k34nF\",\"stopwatchLaps\":\"_3dgbVnVgBhRKru6Wd3_GeJ\",\"stopwatchLapsNum\":\"YQvcCYOCgGldX2anHmFjO\",\"stopwatchLapsMilli\":\"_2wjVrZLfuyBQS5QPDO7ed-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dClockMain\":\"_1xXDUH4PU5a4ndkfiHSxXo\",\"dClockTime\":\"RWBjX4VKpUD4tj0cR3e4X\",\"dClockWorld\":\"_30Wg2XEyR6glPU_EBshKLS\",\"dClockDate\":\"_2BCwIWD0t0Kl-PvUYMCCgj\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport style from './header.css';\r\n\r\nclass Header extends React.Component{\r\n    render(){\r\n        return(\r\n            <header>\r\n                <ul>\r\n                    <li><NavLink exact to=\"/\">Clock</NavLink></li>\r\n                    <li><NavLink to=\"/stopwatch\">Stopwatch</NavLink></li>\r\n                </ul>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport style from './digitalClock.css';\r\n\r\nclass DigitalClock extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.date = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\r\n        this.month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n        this.state = {time: new Date()};\r\n        setInterval(() => {this.setState({time: new Date()})}, 100)\r\n    }\r\n\r\n    addZero(num){\r\n        if(num < 10){\r\n            return \"0\" + num;\r\n        } else {\r\n            return num;\r\n        }\r\n    }\r\n    \r\n    getDay(){\r\n        return this.date[this.state.time.getDay()];\r\n    }\r\n\r\n    getMonth(){\r\n        return this.month[this.state.time.getMonth()];\r\n    }\r\n\r\n    render(){\r\n        const time = this.state.time;\r\n        return(\r\n            <div className=\"container\">\r\n                <div className={style.dClockContainer}>\r\n                    <div className={style.dClockMain}>\r\n                        <div className={style.dClockTime}>\r\n                        {this.addZero(time.getHours())}:{this.addZero(time.getMinutes())}:{this.addZero(time.getSeconds())}\r\n                        </div>\r\n                        \r\n                        <div className={style.dClockDate}>\r\n                            {this.getDay(time.getDay())}, {this.getMonth(time.getMonth)} {time.getDate()}, {time.getFullYear()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default DigitalClock;","import React from 'react';\r\nimport style from './stopwatch.css';\r\n\r\nclass Stopwatch extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            elapssed: 0,\r\n            state: 'reset',\r\n            elapssedMemory: 0,\r\n            laps: []\r\n        };\r\n    }\r\n\r\n    clear(){\r\n        this.setState({\r\n            elapssed: 0,\r\n            state: 'reset',\r\n            laps: []\r\n        });\r\n    }\r\n\r\n    start(){\r\n        this.setState({\r\n            startTime: new Date().getTime(),\r\n            elapssed: 0,\r\n            timer: setInterval(() => {\r\n                    this.setState({\r\n                        elapssed: new Date().getTime() - this.state.startTime\r\n                    });\r\n                }, 33),\r\n            state: 'running'\r\n        });\r\n    }\r\n\r\n    pause(){\r\n        clearInterval(this.state.timer);\r\n        this.setState({\r\n            elapssedMemory: this.state.elapssed,\r\n            state: 'pause'\r\n        });\r\n    }\r\n\r\n    lap(){\r\n        let tmp = this.state.laps;\r\n        tmp.push(this.state.elapssed);\r\n        this.setState({\r\n            laps: tmp\r\n        });\r\n    }\r\n\r\n    restart(){\r\n        this.setState({\r\n            startTime: new Date().getTime(),\r\n            elapssed: this.state.elapssedMemory,\r\n            timer: setInterval(() => {\r\n                this.setState({\r\n                    elapssed: this.state.elapssedMemory + (new Date().getTime() - this.state.startTime)\r\n                });\r\n            }, 33),\r\n            state: 'running'\r\n        });\r\n    }\r\n\r\n    addZero(num, length = 2){\r\n        if(length === 3){\r\n            if(num < 10){\r\n                return \"00\" + num;\r\n            } else if(num < 100){\r\n                return \"0\" + num;\r\n            }\r\n            return num;\r\n        }\r\n\r\n        if(num < 10){\r\n            return \"0\" + num;\r\n        } else {\r\n            return num;\r\n        }\r\n    }\r\n\r\n    elapssedToString(time){\r\n        const elapssed = time / 1000;\r\n        const hour = this.addZero(parseInt(elapssed / 3600));\r\n        const min = this.addZero(parseInt((elapssed / 60) % 60));\r\n        const sec = this.addZero(parseInt(elapssed % 60));\r\n        const milli = this.addZero(time % 1000, 3);\r\n\r\n        return [hour, min, sec, milli];\r\n    }\r\n\r\n    render(){\r\n        const elapssed = this.elapssedToString(this.state.elapssed);\r\n\r\n        // ラップタイムを取得\r\n        const laps = [];\r\n        for(const num in this.state.laps){\r\n            laps.push(this.elapssedToString(this.state.laps[num]));\r\n        }\r\n\r\n        return(\r\n            <div className=\"container\">\r\n                <div className={style.stopwatchTime}>\r\n                    <span className={style.stopwatchTimeBig}>{elapssed[0]}:{elapssed[1]}:{elapssed[2]}</span>\r\n                    <span className={style.stopWatchMilliSeconds}>:{elapssed[3]}</span>\r\n                </div>\r\n                <div className={style.stopwatchLaps}>\r\n                    <ul>\r\n                        {\r\n                            laps.reverse().map((num, idx) => (\r\n                                <li class=\"animationFadein\" key={laps.length - idx}>\r\n                                    <span className={style.stopwatchLapsNum}>Lap{this.addZero(laps.length - idx)}</span>\r\n                                    {num[0]}:{num[1]}:{num[2]}<span className={style.stopwatchLapsMilli}>:{num[3]}</span>\r\n                                </li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                <div className={style.stopwatchButtons}>\r\n                    <ul>\r\n                        {(this.state.state === 'reset') && (\r\n                            <li onClick={() => this.start()}>Start</li>\r\n                        )}\r\n                        {(this.state.state === 'running') && (\r\n                            <li onClick={() => this.pause()}>Pause</li>\r\n                        )}\r\n                        {(this.state.state === 'running') && (\r\n                            <li onClick={() => this.lap()}>Lap</li>\r\n                        )}\r\n                        {(this.state.state === 'pause') && (\r\n                            <li onClick={() => this.restart()}>Continue</li>\r\n                        )}\r\n                        {(this.state.state === 'pause') && (\r\n                            <li onClick={() => this.clear()}>Clear</li>\r\n                        )}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Stopwatch;","import React, { Component } from 'react';\nimport { Route, HashRouter } from 'react-router-dom';\nimport SwipeableRoutes from \"react-swipeable-routes\";\nimport './App.css';\n\nimport Header from './components/header.js';\nimport DigitalClock from './components/digitalClock.js';\nimport Stopwatch from './components/stopwatch.js';\n\nclass App extends Component {\n  componentDidMount(){\n    document.title = \"React Clock\"\n  }\n\n  render() {\n    return (\n      <HashRouter basename={process.env.PUBLIC_URL}>\n        <div className=\"content\">\n          <Header />\n          <div className=\"comps\">\n            <SwipeableRoutes className=\"h100\">\n                <Route exact path=\"/\" component={DigitalClock} />\n                <Route path=\"/stopwatch\" component={Stopwatch} />\n            </SwipeableRoutes>\n          </div>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}